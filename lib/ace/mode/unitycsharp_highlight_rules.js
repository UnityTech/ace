/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from ../textmate/unitycsharp.tmLanguage (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var unitycsharpHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = { start: 
       [ { token: 
            [ 'meta.keyword.using.source.cs',
              'keyword.other.using.source.cs',
              'meta.keyword.using.source.cs',
              'meta.keyword.using.source.cs',
              'meta.keyword.using.source.cs' ],
           regex: '^(\\s*)(using)(\\s+)([^ ;]*)(;)' },
         { token: 
            [ 'meta.namespace.source.cs',
              'keyword.other.namespace.source.cs',
              'meta.namespace.identifier.source.cs',
              'entity.name.type.namespace.source.cs' ],
           regex: '^(\\s*)(namespace)(\\s+)([\\w.]+)',
           push: 
            [ { token: 'punctuation.section.namespace.end.source.cs',
                regex: '}',
                next: 'pop' },
              { token: 'punctuation.section.namespace.begin.source.cs',
                regex: '{',
                push: 
                 [ { token: 'meta.namespace.body.source.cs',
                     regex: '(?=})',
                     next: 'pop' },
                   { include: '#code' },
                   { defaultToken: 'meta.namespace.body.source.cs' } ] },
              { defaultToken: 'meta.namespace.source.cs' } ] },
         { include: '#code' },
         { token: 'support.class.csharp.unity',
           regex: '\\b(?:AnimationPlayMode|AnisotropicFiltering|Application|AudioListener|AutoConnectBy|Bounds|CameraClearFlags|Collision|CollisionFlags|Color|ContactPoint|ControllerColliderHit|ControllerControllerHit|Debug|EditorUtility|FilterMode|ForceMode|GL|GizmoType|Gizmos|Graphics|Input|JointLimits|JointMotor|JointSpring|LayerMask|LightRenderMode|LightType|Mathf|Matrix4x4|MenuCommand|Object|AnimationClip|AudioClip|Component|Animation|AudioSource|Behaviour|Camera|ConstantForce|GUIElement|GUIText|GUITexture|GUILayer|LensFlare|Light|MonoBehaviour|Projector|ShaderLayer|Skybox|Collider|BoxCollider|CapsuleCollider|CharacterController|RaycastCollider|SphereCollider|Joint|CharacterJoint|HingeJoint|SpringJoint|LineRenderer|ParticleAnimator|ParticleEmitter|Renderer|ParticleRenderer|Rigidbody|TextMesh|Transform|Flare|GameObject|LodMesh|Material|PhysicMaterial|ScriptableObject|MeshImporter|ScriptableWizard|Shader|Texture|FileTexture|RenderTexture|ParticleRenderMode|PhysicMaterialCombine|Physics|PlayerPrefs|Quaternion|Random|Ray|RaycastHit|Rect|Resolution|RuntimePlatform|Screen|Selection|SelectionMode|SendMessageOptions|ShaderProperties|Space|Time|Vector3|Vector4|WWW|YieldInstruction|Coroutine|WaitForFixedUpdate|WaitForSeconds)\\b' } ],
      '#block': 
       [ { token: 'punctuation.section.block.begin.source.cs',
           regex: '{',
           push: 
            [ { token: 'punctuation.section.block.end.source.cs',
                regex: '}',
                next: 'pop' },
              { include: '#code' },
              { defaultToken: 'meta.block.source.cs' } ] } ],
      '#builtinTypes': 
       [ { token: 'storage.type.source.cs',
           regex: '\\b(?:bool|byte|sbyte|char|decimal|double|float|int|uint|long|ulong|object|short|ushort|string|void|class|struct|enum|interface)\\b' } ],
      '#class': 
       [ { token: 'meta.class.source.cs',
           regex: '(?=\\w?[\\w\\s]*(?:class|struct|interface|enum)\\s+\\w+)',
           push: 
            [ { token: 'punctuation.section.class.end.source.cs',
                regex: '}',
                next: 'pop' },
              { include: '#storage-modifiers' },
              { include: '#comments' },
              { token: 
                 [ 'storage.modifier.source.cs',
                   'meta.class.identifier.source.cs',
                   'entity.name.type.class.source.cs' ],
                regex: '(class|struct|interface|enum)(\\s+)(\\w+)' },
              { token: 'text',
                regex: ':',
                push: 
                 [ { token: 'text', regex: '(?={)', next: 'pop' },
                   { token: [ 'text', 'storage.type.source.cs' ],
                     regex: '(\\s*,?)([A-Za-z_]\\w*)\\b' } ] },
              { token: 'punctuation.section.class.begin.source.cs',
                regex: '{',
                push: 
                 [ { token: 'meta.class.body.source.cs',
                     regex: '(?=})',
                     next: 'pop' },
                   { include: '#method' },
                   { include: '#code' },
                   { defaultToken: 'meta.class.body.source.cs' } ] },
              { defaultToken: 'meta.class.source.cs' } ] } ],
      '#code': 
       [ { include: '#block' },
         { include: '#comments' },
         { include: '#class' },
         { include: '#constants' },
         { include: '#storage-modifiers' },
         { include: '#keywords' },
         { include: '#preprocessor' },
         { include: '#method-call' },
         { include: '#builtinTypes' },
         { include: '#documentation' } ],
      '#comments': 
       [ { token: 'punctuation.definition.comment.source.cs',
           regex: '///',
           push: 
            [ { token: 'punctuation.definition.comment.source.cs',
                regex: '$',
                next: 'pop' },
              { include: 'text.xml' },
              { defaultToken: 'comment.block.documentation.source.cs' } ] },
         { token: 'punctuation.definition.comment.source.cs',
           regex: '/\\*',
           push: 
            [ { token: 'punctuation.definition.comment.source.cs',
                regex: '\\*/',
                next: 'pop' },
              { defaultToken: 'comment.block.source.cs' } ] },
         { token: 'comment.line.double-slash.source.cs',
           regex: '//',
           push: 
            [ { token: [], regex: '$', next: 'pop' },
              { defaultToken: 'comment.line.double-slash.source.cs' } ] } ],
      '#constants': 
       [ { token: 'constant.language.source.cs',
           regex: '\\b(?:true|false|null|this|base)\\b' },
         { token: 'constant.numeric.source.cs',
           regex: '\\b(?:0(?:x|X)[0-9a-fA-F]*|(?:[0-9]+\\.?[0-9]*|\\.[0-9]+)(?:(?:e|E)(?:\\+|-)?[0-9]+)?)(?:L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b' },
         { token: 'punctuation.definition.string.begin.source.cs',
           regex: '@"(?:[^"]|"")*"' },
         { token: 'punctuation.definition.string.begin.source.cs',
           regex: '"',
           push: 
            [ { token: 'punctuation.definition.string.end.source.cs',
                regex: '"',
                next: 'pop' },
              { token: 'constant.character.escape.source.cs', regex: '\\\\.' },
              { defaultToken: 'string.quoted.double.source.cs' } ] },
         { token: 'punctuation.definition.string.begin.source.cs',
           regex: '\'',
           push: 
            [ { token: 'punctuation.definition.string.end.source.cs',
                regex: '\'',
                next: 'pop' },
              { token: 'constant.character.escape.source.cs', regex: '\\\\.' },
              { defaultToken: 'string.quoted.single.source.cs' } ] } ],
      '#keywords': 
       [ { token: 'keyword.control.source.cs',
           regex: '\\b(?:if|else|while|for|foreach|in|do|return|continue|break|switch|case|default|goto|throw|try|catch|finally|lock|yield)\\b' },
         { token: 'keyword.linq.source.cs',
           regex: '\\b(?:from|where|select|group|into|orderby|join|let|on|equals|by|ascending|descending)\\b' },
         { token: 'keyword.operator.source.cs',
           regex: '\\b(?:new|is|as|using|checked|unchecked|typeof|sizeof|override|readonly|stackalloc)\\b' },
         { token: 'keyword.other.source.cs',
           regex: '\\b(?:var|event|delegate|add|remove|set|get|value)\\b' } ],
      '#method': 
       [ { token: 'meta.method.annotation.source.cs',
           regex: '\\[',
           push: 
            [ { token: 'meta.method.annotation.source.cs',
                regex: '\\]',
                next: 'pop' },
              { include: '#constants' },
              { include: '#preprocessor' },
              { include: '#builtinTypes' },
              { defaultToken: 'meta.method.annotation.source.cs' } ] },
         { token: 'meta.new-object.source.cs',
           regex: '(?=\\bnew\\s+)(?=[\\w<].*\\s+)(?=[^=]+\\()',
           push: 
            [ { token: 'meta.new-object.source.cs',
                regex: '(?={|;)',
                next: 'pop' },
              { include: '#code' },
              { defaultToken: 'meta.new-object.source.cs' } ] },
         { token: 'meta.method.source.cs',
           regex: '(?!new)(?=[\\w<].*\\s+)(?=[^=]+\\()',
           push: 
            [ { token: 'punctuation.section.method.end.source.cs',
                regex: '}|(?=;)',
                next: 'pop' },
              { include: '#storage-modifiers' },
              { token: 
                 [ 'entity.name.function.source.cs',
                   'meta.method.identifier.source.cs' ],
                regex: '([\\w.]+)(\\s*\\()',
                push: 
                 [ { token: 'meta.method.identifier.source.cs',
                     regex: '\\)',
                     next: 'pop' },
                   { include: '#parameters' },
                   { defaultToken: 'meta.method.identifier.source.cs' } ] },
              { token: 'meta.method.return-type.source.cs',
                regex: '(?=\\w.*\\s+[\\w.]+\\s*\\()',
                push: 
                 [ { token: 'meta.method.return-type.source.cs',
                     regex: '(?=[\\w.]+\\s*\\()',
                     next: 'pop' },
                   { include: '#builtinTypes' },
                   { defaultToken: 'meta.method.return-type.source.cs' } ] },
              { token: 
                 [ 'meta.method.base-call.source.cs',
                   'constant.language.source.cs',
                   'meta.method.base-call.source.cs' ],
                regex: '(:\\s*)(this|base)(\\s*\\()',
                push: 
                 [ { token: 'meta.method.base-call.source.cs',
                     regex: '\\)',
                     next: 'pop' },
                   { include: '#builtinTypes' },
                   { defaultToken: 'meta.method.base-call.source.cs' } ] },
              { token: 'punctuation.section.method.begin.source.cs',
                regex: '{',
                push: 
                 [ { token: 'meta.method.body.source.cs',
                     regex: '(?=})',
                     next: 'pop' },
                   { include: '#code' },
                   { defaultToken: 'meta.method.body.source.cs' } ] },
              { defaultToken: 'meta.method.source.cs' } ] },
         { token: 'meta.property.source.cs',
           regex: '(?!new)(?=[\\w<].*\\s+)(?=[^=]+\\{)',
           push: 
            [ { token: 'punctuation.section.property.end.source.cs',
                regex: '}',
                next: 'pop' },
              { include: '#storage-modifiers' },
              { token: 
                 [ 'entity.name.function.source.cs',
                   'meta.method.identifier.source.cs' ],
                regex: '([\\w.]+)(\\s*)(?={)',
                push: 
                 [ { token: [], regex: '(?={)', next: 'pop' },
                   { defaultToken: 'meta.method.identifier.source.cs' } ] },
              { token: 'meta.method.return-type.source.cs',
                regex: '(?=\\w.*\\s+[\\w.]+\\s*\\{)',
                push: 
                 [ { token: 'meta.method.return-type.source.cs',
                     regex: '(?=[\\w.]+\\s*\\{)',
                     next: 'pop' },
                   { include: '#builtinTypes' },
                   { defaultToken: 'meta.method.return-type.source.cs' } ] },
              { token: 'punctuation.section.property.begin.source.cs',
                regex: '{',
                push: 
                 [ { token: 'meta.method.body.source.cs',
                     regex: '(?=})',
                     next: 'pop' },
                   { include: '#code' },
                   { defaultToken: 'meta.method.body.source.cs' } ] },
              { defaultToken: 'meta.property.source.cs' } ] } ],
      '#method-call': 
       [ { token: 
            [ 'meta.method.source.cs',
              'punctuation.definition.method-parameters.begin.source.cs' ],
           regex: '([\\w$]+)(\\()',
           push: 
            [ { token: 'punctuation.definition.method-parameters.end.source.cs',
                regex: '\\)',
                next: 'pop' },
              { token: 'punctuation.definition.seperator.parameter.source.cs',
                regex: ',' },
              { include: '#code' },
              { defaultToken: 'meta.method-call.source.cs' } ] } ],
      '#parameters': 
       [ { token: 
            [ 'storage.type.modifier.source.cs',
              'text',
              'storage.type.generic.source.cs',
              'text',
              'variable.parameter.function.source.cs',
              'text',
              'keyword.operator.assignment.source.cs' ],
           regex: '\\b((?:ref|params|out)?)(\\s*\\b)([\\w.\\[\\]]+)(\\s+)(\\w+)(\\s*)((?:=)?)',
           push: 
            [ { token: 'punctuation.definition.separator.parameter.source.cs',
                regex: ',|(?=[\\)])',
                next: 'pop' },
              { include: '#constants' },
              { include: '#block' } ] } ],
      '#preprocessor': 
       [ { token: 
            [ 'meta.preprocessor.source.cs',
              'meta.preprocessor.source.cs',
              'meta.toc-list.region.source.cs' ],
           regex: '^(\\s*#\\s*)(region)\\b(.*)$' },
         { token: 
            [ 'meta.preprocessor.source.cs',
              'meta.preprocessor.source.cs',
              'meta.preprocessor.source.cs',
              'entity.name.function.preprocessor.source.cs' ],
           regex: '^(\\s*#\\s*)(define)\\b(\\s*)(\\S*)' },
         { token: [ 'meta.preprocessor.source.cs', 'meta.preprocessor.source.cs' ],
           regex: '^(\\s*#\\s*)(if|else|elif|endif|define|undef|warning|error|line|pragma|region|endregion)\\b' } ],
      '#storage-modifiers': 
       [ { token: 'storage.modifier.source.cs',
           regex: '\\b(?:event|delegate|internal|public|protected|private|static|const|new|sealed|abstract|virtual|override|extern|unsafe|readonly|volatile|implicit|explicit|operator)\\b' } ] }
    
    this.normalizeRules();
};

unitycsharpHighlightRules.metaData = { comment: 'Unity API Calls: version 1.0',
      fileTypes: [ 'cs' ],
      foldingStartMarker: '^\\s*#\\s*region|^\\s*/\\*|^(?![^{]*?//|[^{]*?/\\*(?!.*?\\*/.*?\\{)).*?\\{\\s*($|//|/\\*(?!.*?\\*/.*\\S))',
      foldingStopMarker: '^\\s*#\\s*endregion|^\\s*\\*/|^\\s*\\}',
      keyEquivalent: '^~C',
      name: 'unitycsharp',
      scopeName: 'source.cs' }


oop.inherits(unitycsharpHighlightRules, TextHighlightRules);

exports.unitycsharpHighlightRules = unitycsharpHighlightRules;
});